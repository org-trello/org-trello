#+property: board-name    api test board
#+property: board-id      51d99bbc1e1d8988390047f2
#+property: TODO 51d99bbc1e1d8988390047f3
#+property: IN-PROGRESS 51d99bbc1e1d8988390047f4
#+property: DONE 51d99bbc1e1d8988390047f5
#+property: PENDING 51e53898ea3d1780690015ca
#+property: DELEGATED 51e538a89c05f1e25c0027c6
#+property: FAIL 51e538a26f75d07902002d25
#+property: CANCELLED 51e538e6c7a68fa0510014ee
#+TODO: TODO IN-PROGRESS DONE | PENDING DELEGATED FAIL CANCELLED
#+title: synced from trello
#+author: Antoine R. Dumont

* TODO Reasoned schemer
:PROPERTIES:
:END:
* TODO Little schemer
:PROPERTIES:
:END:
* TODO Structure and Interpretations of computer programs
:PROPERTIES:
:END:
* TODO Seasoned schemer
:PROPERTIES:
:END:
* TODO Clojurescript
:PROPERTIES:
:END:
* TODO Joy of FUN(ctional) LANGUAGES
:PROPERTIES:
:END:
** LISP family
:PROPERTIES:
:END:
*** TODO Emacs-Lisp
:PROPERTIES:
:END:
*** TODO Common-Lisp
:PROPERTIES:
:END:
*** TODO Scheme
:PROPERTIES:
:END:
*** TODO Clojure
:PROPERTIES:
:END:
** hybrid family
:PROPERTIES:
:END:
*** TODO Scala
:PROPERTIES:
:END:
** ML family
:PROPERTIES:
:END:
*** TODO Haskell
:PROPERTIES:
:END:
*** TODO Ocaml
:PROPERTIES:
:END:
* PENDING Questions about life, the universe and everything
:PROPERTIES:
:END:
** How to deal with promotion/demotion?
:PROPERTIES:
:END:
* PENDING Joy of Clojure
:PROPERTIES:
:END:
** Part 3 Functional Programming
:PROPERTIES:
:END:
*** TODO Being lazy and set in your ways
:PROPERTIES:
:END:
*** TODO Immutability
:PROPERTIES:
:END:
*** TODO Designing a persistent toy
:PROPERTIES:
:END:
*** TODO Laziness
:PROPERTIES:
:END:
*** TODO Putting it all together: a lazy quicksort
:PROPERTIES:
:END:
*** TODO Functional programming
:PROPERTIES:
:END:
*** TODO Functions in all their forms [100%]
:PROPERTIES:
:END:
*** TODO Closures
:PROPERTIES:
:END:
*** TODO Thinking recursively
:PROPERTIES:
:END:
*** TODO Putting it all together: A* pathfinding
:PROPERTIES:
:END:
** Part 2 Data Types
:PROPERTIES:
:END:
*** TODO On scalars [100%]
:PROPERTIES:
:END:
*** TODO Composite data types [100%]
:PROPERTIES:
:END:
** Part 4 Large-Scale Design
:PROPERTIES:
:END:
*** TODO Macros
:PROPERTIES:
:END:
*** TODO Java.next
:PROPERTIES:
:END:
*** TODO Mutation
:PROPERTIES:
:END:
*** TODO Combining data and code
:PROPERTIES:
:END:
** Part 1 Foundations [0%]
:PROPERTIES:
:END:
*** TODO Clojure philosophy [100%]
:PROPERTIES:
:END:
*** TODO Drinking from the Clojure firehose
:PROPERTIES:
:END:
*** TODO Dipping our toes in the pool
:PROPERTIES:
:END:
** Part 5 Tangential Considerations
:PROPERTIES:
:END:
*** TODO Performance
:PROPERTIES:
:END:
*** TODO Clojure changes the way you think
:PROPERTIES:
:END:
* DONE Programming in Haskell
:PROPERTIES:
:END:
* DONE Clojure Programming
:PROPERTIES:
:END:
* DONE Functional programming in Haskell
:PROPERTIES:
:END:
* DONE Programming in scala
:PROPERTIES:
:END:
** chapters
:PROPERTIES:
:END:
*** TODO introduction
:PROPERTIES:
:END:
*** TODO Ch. 1 - A scalable language
:PROPERTIES:
:END:
*** TODO Ch. 2 - First steps in scala
:PROPERTIES:
:END:
*** TODO Ch. 3 - Next steps in scala
:PROPERTIES:
:END:
*** TODO Ch. 4 - Classes and objects
:PROPERTIES:
:END:
*** TODO Ch. 5 - Basic types and operations
:PROPERTIES:
:END:
*** TODO Ch. 6 - Functional objects
:PROPERTIES:
:END:
*** TODO Ch. 7 - Buit-in control structures
:PROPERTIES:
:END:
*** TODO Ch. 8 - Functions and closures
:PROPERTIES:
:END:
*** TODO Ch. 9 - Control abstraction
:PROPERTIES:
:END:
*** TODO Ch. 10 - Composition and inheritance
:PROPERTIES:
:END:
*** TODO Ch. 11 - Scala's hierarchy
:PROPERTIES:
:END:
*** TODO Ch. 12 - Traits
:PROPERTIES:
:END:
