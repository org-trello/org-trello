#+property: board-name    api test board
#+property: board-id      51d99bbc1e1d8988390047f2
#+property: TODO 51d99bbc1e1d8988390047f3
#+property: IN-PROGRESS 51d99bbc1e1d8988390047f4
#+property: DONE 51d99bbc1e1d8988390047f5
#+property: PENDING 51e53898ea3d1780690015ca
#+property: DELEGATED 51e538a89c05f1e25c0027c6
#+property: FAIL 51e538a26f75d07902002d25
#+property: CANCELLED 51e538e6c7a68fa0510014ee
#+TODO: TODO IN-PROGRESS PENDING | DONE DELEGATED FAIL CANCELLED
#+title: synced from trello
#+author: Antoine R. Dumont

* TODO Joy of FUN(ctional) LANGUAGES
** LISP family
*** Clojure
*** Emacs-Lisp
*** Common-Lisp
*** Scheme
** ML family
*** Haskell
*** Ocaml
** hybrid family
*** Scala
* TODO Clojurescript
* TODO Reasoned schemer
:PROPERTIES:
:END:
* TODO Little schemer
:PROPERTIES:
:END:
* TODO Structure and Interpretations of computer programs
:PROPERTIES:
:END:
* TODO Seasoned schemer
* PENDING Questions about life, the universe and everything
:PROPERTIES:
:END:
** How to deal with promotion/demotion?
* PENDING Joy of Clojure
** Part 1 Foundations [0%]
*** Clojure philosophy [100%]
*** Drinking from the Clojure firehose
*** Dipping our toes in the pool
** Part 2 Data Types
*** On scalars [100%]
*** Composite data types [100%]
** Part 3 Functional Programming
*** Being lazy and set in your ways
*** Immutability
*** Designing a persistent toy
*** Laziness
*** Putting it all together: a lazy quicksort
*** Functional programming
*** Functions in all their forms [100%]
*** Closures
*** Thinking recursively
*** Putting it all together: A* pathfinding
** Part 4 Large-Scale Design
*** Macros
*** Combining data and code
*** Java.next
*** Mutation
** Part 5 Tangential Considerations
*** Performance
*** Clojure changes the way you think
* DONE Programming in Haskell
* DONE Clojure Programming
* DONE Functional programming in Haskell
* DONE Programming in scala
** chapters
*** introduction
*** Ch. 1 - A scalable language
*** Ch. 2 - First steps in scala
*** Ch. 6 - Functional objects
*** Ch. 7 - Buit-in control structures
*** Ch. 8 - Functions and closures
*** Ch. 10 - Composition and inheritance
*** Ch. 11 - Scala's hierarchy
*** Ch. 12 - Traits
*** Ch. 3 - Next steps in scala
*** Ch. 9 - Control abstraction
*** Ch. 4 - Classes and objects
*** Ch. 5 - Basic types and operations
