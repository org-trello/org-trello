(require 'ert)

(message "Launching tests!")

(load-file "org-trello.el")

;; ########################## orgtrello-hash

(ert-deftest testing-orgtrello-hash/make-hash-org ()
  (let* ((meta (orgtrello-hash/make-hash-org 0 "IN PROGRESS" "some title" "some id" "point")))
    (should (equal (gethash :title   meta) "some title"))
    (should (equal (gethash :keyword meta) "IN PROGRESS"))
    (should (equal (gethash :level   meta) 0))
    (should (equal (gethash :id      meta) "some id"))
    (should (equal (gethash :point   meta) "point"))))

(ert-deftest testing-orgtrello-hash/make-hash ()
  (let ((h (orgtrello-hash/make-hash :some-method :some-uri)))
    (should (equal (gethash :method h) :some-method))
    (should (equal (gethash :uri    h) :some-uri))
    (should (equal (gethash :params h) nil))))

;; ########################## orgtrello-data

(ert-deftest testing-orgtrello-data/--get-level ()
  (should (equal (orgtrello-data/--get-level '(:pt :id 0 0 "IN PROGRESS" nil "HEADING_LABEL" nil)) 0))
  (should (equal (orgtrello-data/--get-level '(:pt :id 1 0 "IN PROGRESS" nil "HEADING_LABEL" nil)) 1)))

(ert-deftest testing-orgtrello-data/--get-keyword ()
  (should (equal (orgtrello-data/--get-keyword '(:pt :id 0  0 "IN PROGRESS" nil "HEADING_LABEL" nil)) "IN PROGRESS"))
  (should (equal (orgtrello-data/--get-keyword '(:pt :id 1  0 "TODO"        nil "HEADING_LABEL" nil)) "TODO")))

(ert-deftest testing-orgtrello-data/--get-title ()
;;  (should (equal (orgtrello-data/--get-title '(:pt :id 0  0 "IN PROGRESS" :some nil :tags))              nil))
  (should (equal (orgtrello-data/--get-title '(:pt :id 0  0 "IN PROGRESS" :some "title 0" nil))          "title 0"))
  (should (equal (orgtrello-data/--get-title '(:pt :id 1  0 "TODO"        :some "some other title" nil)) "some other title")))

(ert-deftest testing-orgtrello-data/--get-id ()
  (should (equal (orgtrello-data/--get-id '(:pt nil 1  0 "TODO"  nil "some other title" nil)) nil))
  (should (equal (orgtrello-data/--get-id '(:pt :id0 1  0 "TODO" nil "some other title" nil)) :id0)))

(ert-deftest testing-orgtrello-data/--get-point ()
  (should (equal (orgtrello-data/--get-point '(:pt nil 1  0 "TODO"  nil "some other title" nil)) :pt))
  (should (equal (orgtrello-data/--get-point '(:pt2 :id0 1  0 "TODO" nil "some other title" nil)) :pt2)))

(ert-deftest testing-orgtrello-data/--get-metadata ()
  (let* ((meta (orgtrello-data/--get-metadata '(:pt :id 0 1 "IN PROGRESS" nil "some title :orgtrello-id-identifier:" nil))))
    (should (equal (gethash :title   meta) "some title :orgtrello-id-identifier:"))
    (should (equal (gethash :keyword meta) "IN PROGRESS"))
    (should (equal (gethash :level   meta) 0))
    (should (equal (gethash :id      meta) :id))
    (should (equal (gethash :point   meta) :pt))))

;; ########################## orgtrello-api

(ert-deftest testing-orgtrello-api/get-boards ()
  (let ((h (orgtrello-api/get-boards)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/members/me/boards"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-orgtrello-api/get-board ()
  (let ((h (orgtrello-api/get-board :id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/boards/:id"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-orgtrello-api/get-cards ()
  (let ((h (orgtrello-api/get-cards :board-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/boards/:board-id/cards"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-orgtrello-api/get-card ()
  (let ((h (orgtrello-api/get-card :card-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/cards/:card-id"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-orgtrello-api/delete-card ()
  (let ((h (orgtrello-api/delete-card :card-id)))
    (should (equal (gethash :method h) :delete))
    (should (equal (gethash :uri    h) "/cards/:card-id"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-orgtrello-api/get-lists ()
  (let ((h (orgtrello-api/get-lists :board-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/boards/:board-id/lists"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-orgtrello-api/get-list ()
  (let ((h (orgtrello-api/get-list :list-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/lists/:list-id"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-orgtrello-api/add-list ()
  (let ((h (orgtrello-api/add-list "list-name" "board-id")))
    (should (equal (gethash :method h) :post))
    (should (equal (gethash :uri    h) "/lists/"))
    (should (equal (gethash :params h) '(("name" . "list-name")
                                         ("idBoard" . "board-id"))))))

(ert-deftest testing-orgtrello-api/add-card ()
  (let ((h (orgtrello-api/add-card "card-name" "list-id")))
    (should (equal (gethash :method h) :post))
    (should (equal (gethash :uri    h) "/cards/"))
    (should (equal (gethash :params h) '(("name" . "card-name") ("idList" . "list-id"))))))

(ert-deftest testing-orgtrello-api/get-cards-from-list ()
  (let ((h (orgtrello-api/get-cards-from-list :list-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/lists/:list-id/cards"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-orgtrello-api/move-card ()
  (let ((h (orgtrello-api/move-card :id-card :id-list "name-card")))
    (should (equal (gethash :method h) :put))
    (should (equal (gethash :uri    h) "/cards/:id-card"))
    (should (equal (gethash :params h) '(("name"   . "name-card")
                                         ("idList" . :id-list))))))

(ert-deftest testing-orgtrello-api/move-card-without-name ()
  (let ((h (orgtrello-api/move-card :id-card :id-list)))
    (should (equal (gethash :method h) :put))
    (should (equal (gethash :uri    h) "/cards/:id-card"))
    (should (equal (gethash :params h) '(("idList" . :id-list))))))

(ert-deftest testing-orgtrello-api/add-checklist ()
  (let ((h (orgtrello-api/add-checklist "id-card" "name-checklist")))
    (should (equal (gethash :method h) :post))
    (should (equal (gethash :uri    h) "/cards/id-card/checklists"))
    (should (equal (gethash :params h) '(("name" . "name-checklist"))))))

(ert-deftest testing-orgtrello-api/update-checklist ()
  (let ((h (orgtrello-api/update-checklist :id-checklist "name-checklist")))
    (should (equal (gethash :method h) :put))
    (should (equal (gethash :uri    h) "/checklists/:id-checklist"))
    (should (equal (gethash :params h) '(("name" . "name-checklist"))))))

(ert-deftest testing-orgtrello-api/delete-checklist ()
  (let ((h (orgtrello-api/delete-checklist :id-checklist)))
    (should (equal (gethash :method h) :delete))
    (should (equal (gethash :uri    h) "/checklists/:id-checklist"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-orgtrello-api/get-checklists ()
  (let ((h (orgtrello-api/get-checklists :card-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/cards/:card-id/checklists"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-orgtrello-api/get-checklist ()
  (let ((h (orgtrello-api/get-checklist :checklist-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/checklists/:checklist-id"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-orgtrello-api/add-tasks ()
  (let ((h (orgtrello-api/add-tasks :checklist-id "task-name" t)))
    (should (equal (gethash :method h) :post))
    (should (equal (gethash :uri    h) "/checklists/:checklist-id/checkItems"))
    (should (equal (gethash :params h) '(("name"  . "task-name")
                                         ("checked" . t))))))

(ert-deftest testing-orgtrello-api/add-tasks-with-state-nil ()
  (let ((h (orgtrello-api/add-tasks :checklist-id "task-name")))
    (should (equal (gethash :method h) :post))
    (should (equal (gethash :uri    h) "/checklists/:checklist-id/checkItems"))
    (should (equal (gethash :params h) '(("name"  . "task-name")))))
  (let ((h (orgtrello-api/add-tasks :checklist-id "task-name" nil)))
    (should (equal (gethash :method h) :post))
    (should (equal (gethash :uri    h) "/checklists/:checklist-id/checkItems"))
    (should (equal (gethash :params h) '(("name"  . "task-name"))))))

(ert-deftest testing-orgtrello-api/update-task ()
  (let ((h (orgtrello-api/update-task :card-id :checklist-id :task-id :task-name "incomplete")))
    (should (equal (gethash :method h) :put))
    (should (equal (gethash :uri    h) "/cards/:card-id/checklist/:checklist-id/checkItem/:task-id"))
    (should (equal (gethash :params h) '(("name"  . :task-name)
                                         ("state" ."incomplete"))))))

(ert-deftest testing-orgtrello-api/update-task-with-state-nil ()
  (let ((h (orgtrello-api/update-task :card-id :checklist-id :task-id :task-name)))
    (should (equal (gethash :method h) :put))
    (should (equal (gethash :uri    h) "/cards/:card-id/checklist/:checklist-id/checkItem/:task-id"))
    (should (equal (gethash :params h) '(("name"  . :task-name)))))
  (let ((h (orgtrello-api/update-task :card-id :checklist-id :task-id :task-name nil)))
    (should (equal (gethash :method h) :put))
    (should (equal (gethash :uri    h) "/cards/:card-id/checklist/:checklist-id/checkItem/:task-id"))
    (should (equal (gethash :params h) '(("name"  . :task-name))))))

(ert-deftest testing-orgtrello-api/delete-task ()
  (let ((h (orgtrello-api/delete-task :checklist-id :task-id)))
    (should (equal (gethash :method h) :delete))
    (should (equal (gethash :uri    h) "/checklists/:checklist-id/checkItems/:task-id"))))

;; ########################## orgtrello-query

(ert-deftest testing-orgtrello-query/--compute-method ()
  (should (equal (orgtrello-query/--compute-method :get)    "GET"))
  (should (equal (orgtrello-query/--compute-method :post)   "POST"))
  (should (equal (orgtrello-query/--compute-method :put)    "PUT"))
  (should (equal (orgtrello-query/--compute-method :delete) "DELETE")))

(ert-deftest testing-orgtrello-query/--compute-url ()
  (should (equal (orgtrello-query/--compute-url "/uri")
                 (format "%s%s" *TRELLO-URL* "/uri")))
  (should (equal (orgtrello-query/--compute-url "/uri/other")
                 (format "%s%s" *TRELLO-URL* "/uri/other")))
  (should (equal (orgtrello-query/--compute-url "/uri/some/other")
                 (format "%s%s" *TRELLO-URL* "/uri/some/other"))))

;; ########################## orgtrello-tests

(ert-deftest testing-orgtrello/--compute-list-key ()
  (should (equal (orgtrello/--compute-list-key *TODO*)        *TODO-LIST-ID*))
  (should (equal (orgtrello/--compute-list-key *DONE*)        *DONE-LIST-ID*))
  (should (equal (orgtrello/--compute-list-key "otherwise")   *DOING-LIST-ID*))
  (should (equal (orgtrello/--compute-list-key "IN PROGRESS") *DOING-LIST-ID*)))

(ert-deftest testing-orgtrello/--merge-map ()
  (let* ((entry   (orgtrello-hash/make-hash-org :level :method "the name of the entry" nil :pt))
         (map-ids (make-hash-table :test 'equal)))
    (puthash "the name of the entry" :some-id map-ids)
    (should (equal (gethash :id (orgtrello/--merge-map entry map-ids)) :some-id))))

(ert-deftest testing-orgtrello/--merge-map2 ()
  (let* ((entry   (orgtrello-hash/make-hash-org :level :method :title :id-already-there :pt))
         (map-ids (make-hash-table :test 'equal)))
    (puthash :title :some-id map-ids)
    (should (equal (gethash :id (orgtrello/--merge-map entry map-ids)) :id-already-there))))

(ert-deftest testing-orgtrello/--merge-map3 ()
  (let* ((entry   (orgtrello-hash/make-hash-org :level :method :title :id-already-there :point))
         (map-ids (make-hash-table :test 'equal)))
    (should (equal (gethash :id (orgtrello/--merge-map entry map-ids)) :id-already-there))))

(ert-deftest testing-orgtrello/--id-name ()
  (let* ((entities [((id . "id")
                     (shortUrl . "https://trello.com/b/ePrdEnzC")
                     (url . "https://trello.com/board/devops/4f96a984dbb00d733b04d8b5") (name . "testing board"))
                    ((id . "another-id")
                     f(shortUrl . "https://trello.com/b/ePrdEnzC")
                     (url . "https://trello.com/board/devops/4f96a984dbb00d733b04d8b5")
                     (name . "testing board 2"))
                    ((id . "yet-another-id")
                     (shortUrl . "https://trello.com/b/ePrdEnzC")
                     (url . "https://trello.com/board/devops/4f96a984dbb00d733b04d8b5")
                     (name . "testing board 3"))])
         (hashtable-result (orgtrello/--id-name entities))
         (hashtable-expected (make-hash-table :test 'equal)))
    (puthash "id" "testing board" hashtable-expected)
    (puthash "another-id" "testing board 2" hashtable-expected)
    (puthash "yet-another-id" "testing board 3" hashtable-expected)
    (should (equal (gethash "id" hashtable-result) (gethash "id" hashtable-expected)))
    (should (equal (gethash "another-id" hashtable-result) (gethash "another-id" hashtable-expected)))
    (should (equal (gethash "yet-another-id" hashtable-result) (gethash "yet-another-id" hashtable-expected)))
    (should (equal (length (cl-values hashtable-result)) (length (cl-values hashtable-expected))))))

(ert-deftest testing-orgtrello/--name-id ()
  (let* ((entities [((id . "id")
                     (shortUrl . "https://trello.com/b/ePrdEnzC")
                     (name . "testing board"))
                    ((id . "another-id")
                     f(shortUrl . "https://trello.com/b/ePrdEnzC")
                     (name . "testing board 2"))
                    ((id . "yet-another-id")
                     (shortUrl . "https://trello.com/b/ePrdEnzC")
                     (name . "testing board 3"))])
         (hashtable-result (orgtrello/--name-id entities))
         (hashtable-expected (make-hash-table :test 'equal)))
    (puthash "testing board" "id" hashtable-expected)
    (puthash "testing board 2" "another-id"  hashtable-expected)
    (puthash "testing board 3" "yet-another-id"  hashtable-expected)
    (should (equal (gethash "testing board" hashtable-result) (gethash "testing board" hashtable-expected)))
    (should (equal (gethash "testing board 2" hashtable-result) (gethash "testing board 2" hashtable-expected)))
    (should (equal (gethash "testing board 3" hashtable-result) (gethash "testing board 3" hashtable-expected)))
    (should (equal (length (cl-values hashtable-result)) (length (cl-values hashtable-expected))))))

(message "Tests done!")
